import { WhimbrelContext } from './context'
import { FileSystemMutation } from './fs'
import { ContextMutation } from './mutation'
import { makeTask, Task, TaskId, TaskParameters } from './task'
import { VCSMutation } from './vcs'

/**
 * Describes a single step of an ExecutionPlan.
 */
export interface ExecutionStep {
  /**
   * The unique(within a branch of a step tree) identifier of the step.
   *
   * This will typically have the format of <actor>:<facet>:<task>.
   *
   * For example, `myproject:eslint:create` for a step that creates an
   * eslint configuration file in project described by Actor 'myproject'.
   */
  id: string
  /**
   * The human-readable name of the Step, as shown in the step tree output
   * of a plan.
   */
  name: string
  /**
   * The Task associated with this step.
   */
  task: Task
  /**
   * The input parameters of this step.
   */
  inputs: any
  /**
   * Declaration of expected and required parameters to be provided by
   * `inputs`.
   */
  parameters: TaskParameters
  /**
   * Meta-directives for this step, controlling the selection of source
   * and target actors or this step and its children.
   */
  meta: StepMeta
  /**
   * The "state" of this step in the execution tree. Typically determined
   * during plan materialization, and is used to signal if a step is satisfied
   * or redundant due to the purpose of the task associated with the step
   * already being fulfilled.
   */
  treeState: TreeState
  /**
   * The child steps and tasks of this step.
   */
  steps: ExecutionStep[]
}

/**
 * Meta-directive structure for this step, describing selection of source
 * and target actors.
 */
export interface StepMeta {
  source?: string
  target?: string
}

/**
 * Enum-type or TreeState.state
 */
export type TreeNodeState = 'default' | 'satisfied' | 'error'

/**
 * Describes the "state" of an ExecutionStep in the Execution tree.
 */
export interface TreeState {
  state: TreeNodeState
  reason?: string
}

export type JournalEntryType = string

/**
 * Contains the results/mutations generated by an ExecutionStep.
 */
export interface StepExecutionResult {
  journal: JournalEntry[]
  mutations: {
    fs: FileSystemMutation[]
    vcs: VCSMutation[]
    ctx: ContextMutation[]
  }
}

/**
 * Convenience-function that creates a valid empty StepExecutionResult.
 */
export const newStepResult = (): StepExecutionResult => {
  return {
    journal: [],
    mutations: {
      fs: [],
      vcs: [],
      ctx: [],
    },
  }
}

/**
 * Constructs a "null-object" step.
 */
export const makeNullExecutionStep = (): ExecutionStep => {
  return {
    id: 'none',
    name: 'None',
    task: makeTask({
      id: 'none',
    }),
    inputs: {},
    parameters: {},
    treeState: {
      state: 'default',
    },
    meta: {},
    steps: [],
  }
}

export type AcceptJournalEntryHandler = (entry: JournalEntry) => void

export const defaultJournalEntryHandler = (ctx: WhimbrelContext) => {
  return (entry: JournalEntry) => {
    if (ctx.stepResult) {
      ctx.stepResult.journal.push(entry)
    }
  }
}

export type JournalEntryOrigin = 'flow'

export interface JournalEntry {
  origin: JournalEntryOrigin
  type: JournalEntryType
  payload: any
  private?: boolean
}
